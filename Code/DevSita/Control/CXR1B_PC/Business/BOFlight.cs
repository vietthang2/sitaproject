/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 04/10/2020 10:20:59 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using CXR1BSAC.Data;

namespace CXR1BSAC.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOFlight.
	///It maintains a collection of BOField objects.
	///</Summary>
	public partial class BOFlight : Conn_BaseBusiness
	{
		#region member variables
		protected string _identify;
		protected string _adi;
		protected string _linecode;
		protected string _number;
		protected string _scheduleDate;
		protected string _schedule;
		protected string _softReplace;
		protected string _siteIata;
		protected string _dateBoundary;
		protected Int32? _chute;
		protected DateTime? _lastChanged;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOField> _boFieldCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOFlight()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string identify
		///</parameters>
		public BOFlight(string identify)
		{
			try
			{
				DAOFlight daoFlight = DAOFlight.SelectOne(identify);
				_identify = daoFlight.Identify;
				_adi = daoFlight.Adi;
				_linecode = daoFlight.Linecode;
				_number = daoFlight.Number;
				_scheduleDate = daoFlight.ScheduleDate;
				_schedule = daoFlight.Schedule;
				_softReplace = daoFlight.SoftReplace;
				_siteIata = daoFlight.SiteIata;
				_dateBoundary = daoFlight.DateBoundary;
				_chute = daoFlight.Chute;
				_lastChanged = daoFlight.LastChanged;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOFlight
		///</parameters>
		protected internal BOFlight(DAOFlight daoFlight)
		{
			try
			{
				_identify = daoFlight.Identify;
				_adi = daoFlight.Adi;
				_linecode = daoFlight.Linecode;
				_number = daoFlight.Number;
				_scheduleDate = daoFlight.ScheduleDate;
				_schedule = daoFlight.Schedule;
				_softReplace = daoFlight.SoftReplace;
				_siteIata = daoFlight.SiteIata;
				_dateBoundary = daoFlight.DateBoundary;
				_chute = daoFlight.Chute;
				_lastChanged = daoFlight.LastChanged;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Flight record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOFlight daoFlight = new DAOFlight();
			RegisterDataObject(daoFlight);
			BeginTransaction("savenewBOFlight");
			try
			{
				daoFlight.Identify = _identify;
				daoFlight.Adi = _adi;
				daoFlight.Linecode = _linecode;
				daoFlight.Number = _number;
				daoFlight.ScheduleDate = _scheduleDate;
				daoFlight.Schedule = _schedule;
				daoFlight.SoftReplace = _softReplace;
				daoFlight.SiteIata = _siteIata;
				daoFlight.DateBoundary = _dateBoundary;
				daoFlight.Chute = _chute;
				daoFlight.LastChanged = _lastChanged;
				daoFlight.Insert();
				CommitTransaction();
				
				_identify = daoFlight.Identify;
				_adi = daoFlight.Adi;
				_linecode = daoFlight.Linecode;
				_number = daoFlight.Number;
				_scheduleDate = daoFlight.ScheduleDate;
				_schedule = daoFlight.Schedule;
				_softReplace = daoFlight.SoftReplace;
				_siteIata = daoFlight.SiteIata;
				_dateBoundary = daoFlight.DateBoundary;
				_chute = daoFlight.Chute;
				_lastChanged = daoFlight.LastChanged;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOFlight");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Flight record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOFlight
		///</parameters>
		public virtual void Update()
		{
			DAOFlight daoFlight = new DAOFlight();
			RegisterDataObject(daoFlight);
			BeginTransaction("updateBOFlight");
			try
			{
				daoFlight.Identify = _identify;
				daoFlight.Adi = _adi;
				daoFlight.Linecode = _linecode;
				daoFlight.Number = _number;
				daoFlight.ScheduleDate = _scheduleDate;
				daoFlight.Schedule = _schedule;
				daoFlight.SoftReplace = _softReplace;
				daoFlight.SiteIata = _siteIata;
				daoFlight.DateBoundary = _dateBoundary;
				daoFlight.Chute = _chute;
				daoFlight.LastChanged = _lastChanged;
				daoFlight.Update();
				CommitTransaction();
				
				_identify = daoFlight.Identify;
				_adi = daoFlight.Adi;
				_linecode = daoFlight.Linecode;
				_number = daoFlight.Number;
				_scheduleDate = daoFlight.ScheduleDate;
				_schedule = daoFlight.Schedule;
				_softReplace = daoFlight.SoftReplace;
				_siteIata = daoFlight.SiteIata;
				_dateBoundary = daoFlight.DateBoundary;
				_chute = daoFlight.Chute;
				_lastChanged = daoFlight.LastChanged;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOFlight");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Flight record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOFlight daoFlight = new DAOFlight();
			RegisterDataObject(daoFlight);
			BeginTransaction("deleteBOFlight");
			try
			{
				daoFlight.Identify = _identify;
				daoFlight.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOFlight");
				throw;
			}
		}
		
		///<Summary>
		///FlightCollection
		///This method returns the collection of BOFlight objects
		///</Summary>
		///<returns>
		///List[BOFlight]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOFlight> FlightCollection()
		{
			try
			{
				IList<BOFlight> boFlightCollection = new List<BOFlight>();
				IList<DAOFlight> daoFlightCollection = DAOFlight.SelectAll();
			
				foreach(DAOFlight daoFlight in daoFlightCollection)
					boFlightCollection.Add(new BOFlight(daoFlight));
			
				return boFlightCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///FlightCollectionCount
		///This method returns the collection count of BOFlight objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 FlightCollectionCount()
		{
			try
			{
				Int32 objCount = DAOFlight.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///FlightCollectionFromSearchFields
		///This method returns the collection of BOFlight objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOFlight>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOFlight> FlightCollectionFromSearchFields(BOFlight boFlight)
		{
			try
			{
				IList<BOFlight> boFlightCollection = new List<BOFlight>();
				DAOFlight daoFlight = new DAOFlight();
				daoFlight.Identify = boFlight.Identify;
				daoFlight.Adi = boFlight.Adi;
				daoFlight.Linecode = boFlight.Linecode;
				daoFlight.Number = boFlight.Number;
				daoFlight.ScheduleDate = boFlight.ScheduleDate;
				daoFlight.Schedule = boFlight.Schedule;
				daoFlight.SoftReplace = boFlight.SoftReplace;
				daoFlight.SiteIata = boFlight.SiteIata;
				daoFlight.DateBoundary = boFlight.DateBoundary;
				daoFlight.Chute = boFlight.Chute;
				daoFlight.LastChanged = boFlight.LastChanged;
				IList<DAOFlight> daoFlightCollection = DAOFlight.SelectAllBySearchFields(daoFlight);
			
				foreach(DAOFlight resdaoFlight in daoFlightCollection)
					boFlightCollection.Add(new BOFlight(resdaoFlight));
			
				return boFlightCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///FlightCollectionFromSearchFieldsCount
		///This method returns the collection count of BOFlight objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 FlightCollectionFromSearchFieldsCount(BOFlight boFlight)
		{
			try
			{
				DAOFlight daoFlight = new DAOFlight();
				daoFlight.Identify = boFlight.Identify;
				daoFlight.Adi = boFlight.Adi;
				daoFlight.Linecode = boFlight.Linecode;
				daoFlight.Number = boFlight.Number;
				daoFlight.ScheduleDate = boFlight.ScheduleDate;
				daoFlight.Schedule = boFlight.Schedule;
				daoFlight.SoftReplace = boFlight.SoftReplace;
				daoFlight.SiteIata = boFlight.SiteIata;
				daoFlight.DateBoundary = boFlight.DateBoundary;
				daoFlight.Chute = boFlight.Chute;
				daoFlight.LastChanged = boFlight.LastChanged;
				Int32 objCount = DAOFlight.SelectAllBySearchFieldsCount(daoFlight);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///FieldCollection
		///This method returns its collection of BOField objects
		///</Summary>
		///<returns>
		///IList[BOField]
		///</returns>
		///<parameters>
		///BOFlight
		///</parameters>
		public virtual IList<BOField> FieldCollection()
		{
			try
			{
				if(_boFieldCollection == null)
					LoadFieldCollection();
				
				return _boFieldCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadFieldCollection
		///This method loads the internal collection of BOField objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadFieldCollection()
		{
			try
			{
				_boFieldCollection = new List<BOField>();
				IList<DAOField> daoFieldCollection = DAOField.SelectAllByFlightRef(_identify);
				
				foreach(DAOField daoField in daoFieldCollection)
					_boFieldCollection.Add(new BOField(daoField));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddField
		///This method persists a BOField object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOField
		///</parameters>
		public virtual void AddField(BOField boField)
		{
			DAOField daoField = new DAOField();
			RegisterDataObject(daoField);
			BeginTransaction("addField");
			try
			{
				daoField.Id = boField.Id;
				daoField.Name = boField.Name;
				daoField.Instance = boField.Instance;
				daoField.Value = boField.Value;
				daoField.FlightRef = _identify;
				daoField.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boField = new BOField(daoField);
				if(_boFieldCollection != null)
					_boFieldCollection.Add(boField);
			}
			catch
			{
				RollbackTransaction("addField");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllField
		///This method deletes all BOField objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllField()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllField");
			try
			{
				DAOField.DeleteAllByFlightRef(ConnectionProvider, _identify);
				CommitTransaction();
				if(_boFieldCollection != null)
				{
					_boFieldCollection.Clear();
					_boFieldCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllField");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string Identify
		{
			get
			{
				 return _identify;
			}
			set
			{
				_identify = value;
				_isDirty = true;
			}
		}
		
		public virtual string Adi
		{
			get
			{
				 return _adi;
			}
			set
			{
				_adi = value;
				_isDirty = true;
			}
		}
		
		public virtual string Linecode
		{
			get
			{
				 return _linecode;
			}
			set
			{
				_linecode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Number
		{
			get
			{
				 return _number;
			}
			set
			{
				_number = value;
				_isDirty = true;
			}
		}
		
		public virtual string ScheduleDate
		{
			get
			{
				 return _scheduleDate;
			}
			set
			{
				_scheduleDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Schedule
		{
			get
			{
				 return _schedule;
			}
			set
			{
				_schedule = value;
				_isDirty = true;
			}
		}
		
		public virtual string SoftReplace
		{
			get
			{
				 return _softReplace;
			}
			set
			{
				_softReplace = value;
				_isDirty = true;
			}
		}
		
		public virtual string SiteIata
		{
			get
			{
				 return _siteIata;
			}
			set
			{
				_siteIata = value;
				_isDirty = true;
			}
		}
		
		public virtual string DateBoundary
		{
			get
			{
				 return _dateBoundary;
			}
			set
			{
				_dateBoundary = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? Chute
		{
			get
			{
				 return _chute;
			}
			set
			{
				_chute = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? LastChanged
		{
			get
			{
				 return _lastChanged;
			}
			set
			{
				_lastChanged = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}

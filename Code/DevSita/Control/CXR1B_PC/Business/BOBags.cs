/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 04/10/2020 10:20:59 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using CXR1BSAC.Data;

namespace CXR1BSAC.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOBags.
	///</Summary>
	public partial class BOBags : Conn_BaseBusiness
	{
		#region member variables
		protected string _baggageTag;
		protected string _flight;
		protected bool? _processed;
		protected string _bsm;
		protected string _bpm;
		protected DateTime? _timeRcvBSM;
		protected DateTime? _timeSendBPM;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOBags()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string baggageTag
		///</parameters>
		public BOBags(string baggageTag)
		{
			try
			{
				DAOBags daoBags = DAOBags.SelectOne(baggageTag);
				_baggageTag = daoBags.BaggageTag;
				_flight = daoBags.Flight;
				_processed = daoBags.Processed;
				_bsm = daoBags.Bsm;
				_bpm = daoBags.Bpm;
				_timeRcvBSM = daoBags.TimeRcvBSM;
				_timeSendBPM = daoBags.TimeSendBPM;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOBags
		///</parameters>
		protected internal BOBags(DAOBags daoBags)
		{
			try
			{
				_baggageTag = daoBags.BaggageTag;
				_flight = daoBags.Flight;
				_processed = daoBags.Processed;
				_bsm = daoBags.Bsm;
				_bpm = daoBags.Bpm;
				_timeRcvBSM = daoBags.TimeRcvBSM;
				_timeSendBPM = daoBags.TimeSendBPM;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Bags record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOBags daoBags = new DAOBags();
			RegisterDataObject(daoBags);
			BeginTransaction("savenewBOBags");
			try
			{
				daoBags.BaggageTag = _baggageTag;
				daoBags.Flight = _flight;
				daoBags.Processed = _processed;
				daoBags.Bsm = _bsm;
				daoBags.Bpm = _bpm;
				daoBags.TimeRcvBSM = _timeRcvBSM;
				daoBags.TimeSendBPM = _timeSendBPM;
				daoBags.Insert();
				CommitTransaction();
				
				_baggageTag = daoBags.BaggageTag;
				_flight = daoBags.Flight;
				_processed = daoBags.Processed;
				_bsm = daoBags.Bsm;
				_bpm = daoBags.Bpm;
				_timeRcvBSM = daoBags.TimeRcvBSM;
				_timeSendBPM = daoBags.TimeSendBPM;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOBags");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Bags record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOBags
		///</parameters>
		public virtual void Update()
		{
			DAOBags daoBags = new DAOBags();
			RegisterDataObject(daoBags);
			BeginTransaction("updateBOBags");
			try
			{
				daoBags.BaggageTag = _baggageTag;
				daoBags.Flight = _flight;
				daoBags.Processed = _processed;
				daoBags.Bsm = _bsm;
				daoBags.Bpm = _bpm;
				daoBags.TimeRcvBSM = _timeRcvBSM;
				daoBags.TimeSendBPM = _timeSendBPM;
				daoBags.Update();
				CommitTransaction();
				
				_baggageTag = daoBags.BaggageTag;
				_flight = daoBags.Flight;
				_processed = daoBags.Processed;
				_bsm = daoBags.Bsm;
				_bpm = daoBags.Bpm;
				_timeRcvBSM = daoBags.TimeRcvBSM;
				_timeSendBPM = daoBags.TimeSendBPM;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOBags");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Bags record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOBags daoBags = new DAOBags();
			RegisterDataObject(daoBags);
			BeginTransaction("deleteBOBags");
			try
			{
				daoBags.BaggageTag = _baggageTag;
				daoBags.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOBags");
				throw;
			}
		}
		
		///<Summary>
		///BagsCollection
		///This method returns the collection of BOBags objects
		///</Summary>
		///<returns>
		///List[BOBags]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBags> BagsCollection()
		{
			try
			{
				IList<BOBags> boBagsCollection = new List<BOBags>();
				IList<DAOBags> daoBagsCollection = DAOBags.SelectAll();
			
				foreach(DAOBags daoBags in daoBagsCollection)
					boBagsCollection.Add(new BOBags(daoBags));
			
				return boBagsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BagsCollectionCount
		///This method returns the collection count of BOBags objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BagsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOBags.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BagsCollectionFromSearchFields
		///This method returns the collection of BOBags objects, filtered by a search object
		///</Summary>
		///<returns>
		///List<BOBags>
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOBags> BagsCollectionFromSearchFields(BOBags boBags)
		{
			try
			{
				IList<BOBags> boBagsCollection = new List<BOBags>();
				DAOBags daoBags = new DAOBags();
				daoBags.BaggageTag = boBags.BaggageTag;
				daoBags.Flight = boBags.Flight;
				daoBags.Processed = boBags.Processed;
				daoBags.Bsm = boBags.Bsm;
				daoBags.Bpm = boBags.Bpm;
				daoBags.TimeRcvBSM = boBags.TimeRcvBSM;
				daoBags.TimeSendBPM = boBags.TimeSendBPM;
				IList<DAOBags> daoBagsCollection = DAOBags.SelectAllBySearchFields(daoBags);
			
				foreach(DAOBags resdaoBags in daoBagsCollection)
					boBagsCollection.Add(new BOBags(resdaoBags));
			
				return boBagsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///BagsCollectionFromSearchFieldsCount
		///This method returns the collection count of BOBags objects, filtered by a search object
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 BagsCollectionFromSearchFieldsCount(BOBags boBags)
		{
			try
			{
				DAOBags daoBags = new DAOBags();
				daoBags.BaggageTag = boBags.BaggageTag;
				daoBags.Flight = boBags.Flight;
				daoBags.Processed = boBags.Processed;
				daoBags.Bsm = boBags.Bsm;
				daoBags.Bpm = boBags.Bpm;
				daoBags.TimeRcvBSM = boBags.TimeRcvBSM;
				daoBags.TimeSendBPM = boBags.TimeSendBPM;
				Int32 objCount = DAOBags.SelectAllBySearchFieldsCount(daoBags);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string BaggageTag
		{
			get
			{
				 return _baggageTag;
			}
			set
			{
				_baggageTag = value;
				_isDirty = true;
			}
		}
		
		public virtual string Flight
		{
			get
			{
				 return _flight;
			}
			set
			{
				_flight = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Processed
		{
			get
			{
				 return _processed;
			}
			set
			{
				_processed = value;
				_isDirty = true;
			}
		}
		
		public virtual string Bsm
		{
			get
			{
				 return _bsm;
			}
			set
			{
				_bsm = value;
				_isDirty = true;
			}
		}
		
		public virtual string Bpm
		{
			get
			{
				 return _bpm;
			}
			set
			{
				_bpm = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TimeRcvBSM
		{
			get
			{
				 return _timeRcvBSM;
			}
			set
			{
				_timeRcvBSM = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? TimeSendBPM
		{
			get
			{
				 return _timeSendBPM;
			}
			set
			{
				_timeSendBPM = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}

/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 04/10/2020 10:20:59 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace CXR1BSAC.Data
{
	public partial class DAOField : Conn_BaseData
	{
		#region member variables
		protected Guid? _id;
		protected string _name;
		protected string _instance;
		protected string _value;
		protected string _flightRef;
		#endregion

		#region class methods
		public DAOField()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table tblField based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOField
		///</returns>
		///<parameters>
		///Guid? id
		///</parameters>
		public static DAOField SelectOne(Guid? id)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblField");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOField retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOField();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["Id"]) ? (Guid?)null : (Guid?)dt.Rows[0]["Id"];
					retObj._name					 = Convert.IsDBNull(dt.Rows[0]["Name"]) ? null : (string)dt.Rows[0]["Name"];
					retObj._instance					 = Convert.IsDBNull(dt.Rows[0]["Instance"]) ? null : (string)dt.Rows[0]["Instance"];
					retObj._value					 = Convert.IsDBNull(dt.Rows[0]["Value"]) ? null : (string)dt.Rows[0]["Value"];
					retObj._flightRef					 = Convert.IsDBNull(dt.Rows[0]["FlightRef"]) ? null : (string)dt.Rows[0]["FlightRef"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table tblField based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table tblField based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOField.
		///</returns>
		///<parameters>
		///string flightRef
		///</parameters>
		public static IList<DAOField> SelectAllByFlightRef(string flightRef)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAllByFlightRef;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblField");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)flightRef?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOField> objList = new List<DAOField>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOField retObj = new DAOField();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Guid?)null : (Guid?)row["Id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._instance					 = Convert.IsDBNull(row["Instance"]) ? null : (string)row["Instance"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? null : (string)row["Value"];
						retObj._flightRef					 = Convert.IsDBNull(row["FlightRef"]) ? null : (string)row["FlightRef"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string flightRef
		///</parameters>
		public static Int32 SelectAllByFlightRefCount(string flightRef)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAllByFlightRefCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)flightRef?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table tblField with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Conn_TxConnectionProvider connectionProvider, string flightRef
		///</parameters>
		public static void DeleteAllByFlightRef(Conn_TxConnectionProvider connectionProvider, string flightRef)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_DeleteAllByFlightRef;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)flightRef?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table tblField
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Instance", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_instance?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Value", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_value?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_flightRef?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Guid?)null : (Guid?)command.Parameters["@Id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@Name"].Value) ? null : (string)command.Parameters["@Name"].Value;
				_instance					 = Convert.IsDBNull(command.Parameters["@Instance"].Value) ? null : (string)command.Parameters["@Instance"].Value;
				_value					 = Convert.IsDBNull(command.Parameters["@Value"].Value) ? null : (string)command.Parameters["@Value"].Value;
				_flightRef					 = Convert.IsDBNull(command.Parameters["@FlightRef"].Value) ? null : (string)command.Parameters["@FlightRef"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table tblField
		///</Summary>
		///<returns>
		///IList-DAOField.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOField> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblField");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOField> objList = new List<DAOField>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOField retObj = new DAOField();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Guid?)null : (Guid?)row["Id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._instance					 = Convert.IsDBNull(row["Instance"]) ? null : (string)row["Instance"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? null : (string)row["Value"];
						retObj._flightRef					 = Convert.IsDBNull(row["FlightRef"]) ? null : (string)row["FlightRef"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOField.
		///</returns>
		///<parameters>
		///DAOField daoField
		///</parameters>
		public static IList<DAOField> SelectAllBySearchFields(DAOField daoField)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblField");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Instance", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Instance?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Value", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Value?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.FlightRef?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOField> objList = new List<DAOField>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOField retObj = new DAOField();
						retObj._id					 = Convert.IsDBNull(row["Id"]) ? (Guid?)null : (Guid?)row["Id"];
						retObj._name					 = Convert.IsDBNull(row["Name"]) ? null : (string)row["Name"];
						retObj._instance					 = Convert.IsDBNull(row["Instance"]) ? null : (string)row["Instance"];
						retObj._value					 = Convert.IsDBNull(row["Value"]) ? null : (string)row["Value"];
						retObj._flightRef					 = Convert.IsDBNull(row["FlightRef"]) ? null : (string)row["FlightRef"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOField daoField
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOField daoField)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Instance", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Instance?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Value", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.Value?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoField.FlightRef?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table tblField based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblField_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Id", SqlDbType.UniqueIdentifier, 16, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Name", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_name?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Instance", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_instance?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Value", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_value?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_flightRef?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_id					 = Convert.IsDBNull(command.Parameters["@Id"].Value) ? (Guid?)null : (Guid?)command.Parameters["@Id"].Value;
				_name					 = Convert.IsDBNull(command.Parameters["@Name"].Value) ? null : (string)command.Parameters["@Name"].Value;
				_instance					 = Convert.IsDBNull(command.Parameters["@Instance"].Value) ? null : (string)command.Parameters["@Instance"].Value;
				_value					 = Convert.IsDBNull(command.Parameters["@Value"].Value) ? null : (string)command.Parameters["@Value"].Value;
				_flightRef					 = Convert.IsDBNull(command.Parameters["@FlightRef"].Value) ? null : (string)command.Parameters["@FlightRef"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Guid? Id
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}

		public string Name
		{
			get
			{
				return _name;
			}
			set
			{
				_name = value;
			}
		}

		public string Instance
		{
			get
			{
				return _instance;
			}
			set
			{
				_instance = value;
			}
		}

		public string Value
		{
			get
			{
				return _value;
			}
			set
			{
				_value = value;
			}
		}

		public string FlightRef
		{
			get
			{
				return _flightRef;
			}
			set
			{
				_flightRef = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace CXR1BSAC.Data
{
	public partial class InlineProcs
	{
		internal static string ctprtblField_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Name]
			,[Instance]
			,[Value]
			,[FlightRef]
			FROM [dbo].[tblField]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprtblField_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[tblField]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprtblField_SelectAllByFlightRef = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Name]
			,[Instance]
			,[Value]
			,[FlightRef]
			FROM [dbo].[tblField]
			WHERE 
			[FlightRef] = @FlightRef OR ([FlightRef] IS NULL AND @FlightRef IS NULL)
			";

		internal static string ctprtblField_SelectAllByFlightRefCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[tblField]
			WHERE 
			[FlightRef] = @FlightRef OR ([FlightRef] IS NULL AND @FlightRef IS NULL)
			";

		internal static string ctprtblField_DeleteAllByFlightRef = @"
			
			-- delete all matching from the table
			DELETE [dbo].[tblField]
			WHERE 
			[FlightRef] = @FlightRef OR ([FlightRef] IS NULL AND @FlightRef IS NULL)
			";

		internal static string ctprtblField_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[tblField]
			(
			[Id]
			,[Name]
			,[Instance]
			,[Value]
			,[FlightRef]
			)
			VALUES
			(
			@Id
			,@Name
			,@Instance
			,@Value
			,@FlightRef
			)
			SELECT 
			@Id = [Id]
			,@Name = [Name]
			,@Instance = [Instance]
			,@Value = [Value]
			,@FlightRef = [FlightRef]
			FROM [dbo].[tblField]
			WHERE 
			[Id] = @Id
			";

		internal static string ctprtblField_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Id]
			,[Name]
			,[Instance]
			,[Value]
			,[FlightRef]
			FROM [dbo].[tblField]
			";

		internal static string ctprtblField_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[tblField]
			";

		internal static string ctprtblField_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Id],
			[Name],
			[Instance],
			[Value],
			[FlightRef]
			FROM [dbo].[tblField]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Name] LIKE @Name OR @Name is null)
			AND ([Instance] LIKE @Instance OR @Instance is null)
			AND ([Value] LIKE @Value OR @Value is null)
			AND ([FlightRef] LIKE @FlightRef OR @FlightRef is null)
			";

		internal static string ctprtblField_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[tblField]
			WHERE 
			([Id] LIKE @Id OR @Id is null)
			AND ([Name] LIKE @Name OR @Name is null)
			AND ([Instance] LIKE @Instance OR @Instance is null)
			AND ([Value] LIKE @Value OR @Value is null)
			AND ([FlightRef] LIKE @FlightRef OR @FlightRef is null)
			";

		internal static string ctprtblField_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[tblField]
			SET
			[Name] = @Name
			,[Instance] = @Instance
			,[Value] = @Value
			,[FlightRef] = @FlightRef
			WHERE 
			[Id] = @Id
			SELECT 
			@Id = [Id]
			,@Name = [Name]
			,@Instance = [Instance]
			,@Value = [Value]
			,@FlightRef = [FlightRef]
			FROM [dbo].[tblField]
			WHERE 
			[Id] = @Id
			";

	}
}
#endregion

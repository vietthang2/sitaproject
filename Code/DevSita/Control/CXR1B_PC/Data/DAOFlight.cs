/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 04/10/2020 10:20:59 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace CXR1BSAC.Data
{
	public partial class DAOFlight : Conn_BaseData
	{
		#region member variables
		protected string _identify;
		protected string _adi;
		protected string _linecode;
		protected string _number;
		protected string _scheduleDate;
		protected string _schedule;
		protected string _softReplace;
		protected string _siteIata;
		protected string _dateBoundary;
		protected Int32? _chute;
		protected DateTime? _lastChanged;
		#endregion

		#region class methods
		public DAOFlight()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table tblFlight based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOFlight
		///</returns>
		///<parameters>
		///string identify
		///</parameters>
		public static DAOFlight SelectOne(string identify)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblFlight");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)identify?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOFlight retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOFlight();
					retObj._identify					 = Convert.IsDBNull(dt.Rows[0]["Identify"]) ? null : (string)dt.Rows[0]["Identify"];
					retObj._adi					 = Convert.IsDBNull(dt.Rows[0]["Adi"]) ? null : (string)dt.Rows[0]["Adi"];
					retObj._linecode					 = Convert.IsDBNull(dt.Rows[0]["Linecode"]) ? null : (string)dt.Rows[0]["Linecode"];
					retObj._number					 = Convert.IsDBNull(dt.Rows[0]["Number"]) ? null : (string)dt.Rows[0]["Number"];
					retObj._scheduleDate					 = Convert.IsDBNull(dt.Rows[0]["Schedule_date"]) ? null : (string)dt.Rows[0]["Schedule_date"];
					retObj._schedule					 = Convert.IsDBNull(dt.Rows[0]["Schedule"]) ? null : (string)dt.Rows[0]["Schedule"];
					retObj._softReplace					 = Convert.IsDBNull(dt.Rows[0]["SoftReplace"]) ? null : (string)dt.Rows[0]["SoftReplace"];
					retObj._siteIata					 = Convert.IsDBNull(dt.Rows[0]["Site_iata"]) ? null : (string)dt.Rows[0]["Site_iata"];
					retObj._dateBoundary					 = Convert.IsDBNull(dt.Rows[0]["Date_boundary"]) ? null : (string)dt.Rows[0]["Date_boundary"];
					retObj._chute					 = Convert.IsDBNull(dt.Rows[0]["Chute"]) ? (Int32?)null : (Int32?)dt.Rows[0]["Chute"];
					retObj._lastChanged					 = Convert.IsDBNull(dt.Rows[0]["LastChanged"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["LastChanged"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table tblFlight based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_identify?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table tblFlight
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_identify?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Adi", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adi?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Linecode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_linecode?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Number", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule_date", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_scheduleDate?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_schedule?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@SoftReplace", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_softReplace?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Site_iata", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_siteIata?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Date_boundary", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dateBoundary?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Chute", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chute?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@LastChanged", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lastChanged?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_identify					 = Convert.IsDBNull(command.Parameters["@Identify"].Value) ? null : (string)command.Parameters["@Identify"].Value;
				_adi					 = Convert.IsDBNull(command.Parameters["@Adi"].Value) ? null : (string)command.Parameters["@Adi"].Value;
				_linecode					 = Convert.IsDBNull(command.Parameters["@Linecode"].Value) ? null : (string)command.Parameters["@Linecode"].Value;
				_number					 = Convert.IsDBNull(command.Parameters["@Number"].Value) ? null : (string)command.Parameters["@Number"].Value;
				_scheduleDate					 = Convert.IsDBNull(command.Parameters["@Schedule_date"].Value) ? null : (string)command.Parameters["@Schedule_date"].Value;
				_schedule					 = Convert.IsDBNull(command.Parameters["@Schedule"].Value) ? null : (string)command.Parameters["@Schedule"].Value;
				_softReplace					 = Convert.IsDBNull(command.Parameters["@SoftReplace"].Value) ? null : (string)command.Parameters["@SoftReplace"].Value;
				_siteIata					 = Convert.IsDBNull(command.Parameters["@Site_iata"].Value) ? null : (string)command.Parameters["@Site_iata"].Value;
				_dateBoundary					 = Convert.IsDBNull(command.Parameters["@Date_boundary"].Value) ? null : (string)command.Parameters["@Date_boundary"].Value;
				_chute					 = Convert.IsDBNull(command.Parameters["@Chute"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Chute"].Value;
				_lastChanged					 = Convert.IsDBNull(command.Parameters["@LastChanged"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LastChanged"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table tblFlight
		///</Summary>
		///<returns>
		///IList-DAOFlight.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOFlight> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblFlight");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOFlight> objList = new List<DAOFlight>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOFlight retObj = new DAOFlight();
						retObj._identify					 = Convert.IsDBNull(row["Identify"]) ? null : (string)row["Identify"];
						retObj._adi					 = Convert.IsDBNull(row["Adi"]) ? null : (string)row["Adi"];
						retObj._linecode					 = Convert.IsDBNull(row["Linecode"]) ? null : (string)row["Linecode"];
						retObj._number					 = Convert.IsDBNull(row["Number"]) ? null : (string)row["Number"];
						retObj._scheduleDate					 = Convert.IsDBNull(row["Schedule_date"]) ? null : (string)row["Schedule_date"];
						retObj._schedule					 = Convert.IsDBNull(row["Schedule"]) ? null : (string)row["Schedule"];
						retObj._softReplace					 = Convert.IsDBNull(row["SoftReplace"]) ? null : (string)row["SoftReplace"];
						retObj._siteIata					 = Convert.IsDBNull(row["Site_iata"]) ? null : (string)row["Site_iata"];
						retObj._dateBoundary					 = Convert.IsDBNull(row["Date_boundary"]) ? null : (string)row["Date_boundary"];
						retObj._chute					 = Convert.IsDBNull(row["Chute"]) ? (Int32?)null : (Int32?)row["Chute"];
						retObj._lastChanged					 = Convert.IsDBNull(row["LastChanged"]) ? (DateTime?)null : (DateTime?)row["LastChanged"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOFlight.
		///</returns>
		///<parameters>
		///DAOFlight daoFlight
		///</parameters>
		public static IList<DAOFlight> SelectAllBySearchFields(DAOFlight daoFlight)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblFlight");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Identify?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Adi", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Adi?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Linecode", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Linecode?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Number", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule_date", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.ScheduleDate?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Schedule?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@SoftReplace", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.SoftReplace?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Site_iata", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.SiteIata?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Date_boundary", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.DateBoundary?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Chute", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoFlight.Chute?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@LastChanged", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.LastChanged?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOFlight> objList = new List<DAOFlight>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOFlight retObj = new DAOFlight();
						retObj._identify					 = Convert.IsDBNull(row["Identify"]) ? null : (string)row["Identify"];
						retObj._adi					 = Convert.IsDBNull(row["Adi"]) ? null : (string)row["Adi"];
						retObj._linecode					 = Convert.IsDBNull(row["Linecode"]) ? null : (string)row["Linecode"];
						retObj._number					 = Convert.IsDBNull(row["Number"]) ? null : (string)row["Number"];
						retObj._scheduleDate					 = Convert.IsDBNull(row["Schedule_date"]) ? null : (string)row["Schedule_date"];
						retObj._schedule					 = Convert.IsDBNull(row["Schedule"]) ? null : (string)row["Schedule"];
						retObj._softReplace					 = Convert.IsDBNull(row["SoftReplace"]) ? null : (string)row["SoftReplace"];
						retObj._siteIata					 = Convert.IsDBNull(row["Site_iata"]) ? null : (string)row["Site_iata"];
						retObj._dateBoundary					 = Convert.IsDBNull(row["Date_boundary"]) ? null : (string)row["Date_boundary"];
						retObj._chute					 = Convert.IsDBNull(row["Chute"]) ? (Int32?)null : (Int32?)row["Chute"];
						retObj._lastChanged					 = Convert.IsDBNull(row["LastChanged"]) ? (DateTime?)null : (DateTime?)row["LastChanged"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOFlight daoFlight
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOFlight daoFlight)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Identify?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Adi", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Adi?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Linecode", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Linecode?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Number", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule_date", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.ScheduleDate?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.Schedule?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@SoftReplace", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.SoftReplace?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Site_iata", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.SiteIata?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Date_boundary", SqlDbType.NVarChar, 50, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.DateBoundary?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Chute", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)daoFlight.Chute?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@LastChanged", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoFlight.LastChanged?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table tblFlight based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblFlight_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Identify", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_identify?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Adi", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_adi?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Linecode", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_linecode?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Number", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_number?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule_date", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_scheduleDate?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Schedule", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_schedule?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@SoftReplace", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_softReplace?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Site_iata", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_siteIata?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Date_boundary", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_dateBoundary?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Chute", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_chute?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@LastChanged", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lastChanged?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_identify					 = Convert.IsDBNull(command.Parameters["@Identify"].Value) ? null : (string)command.Parameters["@Identify"].Value;
				_adi					 = Convert.IsDBNull(command.Parameters["@Adi"].Value) ? null : (string)command.Parameters["@Adi"].Value;
				_linecode					 = Convert.IsDBNull(command.Parameters["@Linecode"].Value) ? null : (string)command.Parameters["@Linecode"].Value;
				_number					 = Convert.IsDBNull(command.Parameters["@Number"].Value) ? null : (string)command.Parameters["@Number"].Value;
				_scheduleDate					 = Convert.IsDBNull(command.Parameters["@Schedule_date"].Value) ? null : (string)command.Parameters["@Schedule_date"].Value;
				_schedule					 = Convert.IsDBNull(command.Parameters["@Schedule"].Value) ? null : (string)command.Parameters["@Schedule"].Value;
				_softReplace					 = Convert.IsDBNull(command.Parameters["@SoftReplace"].Value) ? null : (string)command.Parameters["@SoftReplace"].Value;
				_siteIata					 = Convert.IsDBNull(command.Parameters["@Site_iata"].Value) ? null : (string)command.Parameters["@Site_iata"].Value;
				_dateBoundary					 = Convert.IsDBNull(command.Parameters["@Date_boundary"].Value) ? null : (string)command.Parameters["@Date_boundary"].Value;
				_chute					 = Convert.IsDBNull(command.Parameters["@Chute"].Value) ? (Int32?)null : (Int32?)command.Parameters["@Chute"].Value;
				_lastChanged					 = Convert.IsDBNull(command.Parameters["@LastChanged"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LastChanged"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string Identify
		{
			get
			{
				return _identify;
			}
			set
			{
				_identify = value;
			}
		}

		public string Adi
		{
			get
			{
				return _adi;
			}
			set
			{
				_adi = value;
			}
		}

		public string Linecode
		{
			get
			{
				return _linecode;
			}
			set
			{
				_linecode = value;
			}
		}

		public string Number
		{
			get
			{
				return _number;
			}
			set
			{
				_number = value;
			}
		}

		public string ScheduleDate
		{
			get
			{
				return _scheduleDate;
			}
			set
			{
				_scheduleDate = value;
			}
		}

		public string Schedule
		{
			get
			{
				return _schedule;
			}
			set
			{
				_schedule = value;
			}
		}

		public string SoftReplace
		{
			get
			{
				return _softReplace;
			}
			set
			{
				_softReplace = value;
			}
		}

		public string SiteIata
		{
			get
			{
				return _siteIata;
			}
			set
			{
				_siteIata = value;
			}
		}

		public string DateBoundary
		{
			get
			{
				return _dateBoundary;
			}
			set
			{
				_dateBoundary = value;
			}
		}

		public Int32? Chute
		{
			get
			{
				return _chute;
			}
			set
			{
				_chute = value;
			}
		}

		public DateTime? LastChanged
		{
			get
			{
				return _lastChanged;
			}
			set
			{
				_lastChanged = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace CXR1BSAC.Data
{
	public partial class InlineProcs
	{
		internal static string ctprtblFlight_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Identify]
			,[Adi]
			,[Linecode]
			,[Number]
			,[Schedule_date]
			,[Schedule]
			,[SoftReplace]
			,[Site_iata]
			,[Date_boundary]
			,[Chute]
			,[LastChanged]
			FROM [dbo].[tblFlight]
			WHERE 
			[Identify] = @Identify
			";

		internal static string ctprtblFlight_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[tblFlight]
			WHERE 
			[Identify] = @Identify
			";

		internal static string ctprtblFlight_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[tblFlight]
			(
			[Identify]
			,[Adi]
			,[Linecode]
			,[Number]
			,[Schedule_date]
			,[Schedule]
			,[SoftReplace]
			,[Site_iata]
			,[Date_boundary]
			,[Chute]
			,[LastChanged]
			)
			VALUES
			(
			@Identify
			,@Adi
			,@Linecode
			,@Number
			,@Schedule_date
			,@Schedule
			,@SoftReplace
			,@Site_iata
			,@Date_boundary
			,@Chute
			,@LastChanged
			)
			SELECT 
			@Identify = [Identify]
			,@Adi = [Adi]
			,@Linecode = [Linecode]
			,@Number = [Number]
			,@Schedule_date = [Schedule_date]
			,@Schedule = [Schedule]
			,@SoftReplace = [SoftReplace]
			,@Site_iata = [Site_iata]
			,@Date_boundary = [Date_boundary]
			,@Chute = [Chute]
			,@LastChanged = [LastChanged]
			FROM [dbo].[tblFlight]
			WHERE 
			[Identify] = @Identify
			";

		internal static string ctprtblFlight_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Identify]
			,[Adi]
			,[Linecode]
			,[Number]
			,[Schedule_date]
			,[Schedule]
			,[SoftReplace]
			,[Site_iata]
			,[Date_boundary]
			,[Chute]
			,[LastChanged]
			FROM [dbo].[tblFlight]
			";

		internal static string ctprtblFlight_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[tblFlight]
			";

		internal static string ctprtblFlight_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Identify],
			[Adi],
			[Linecode],
			[Number],
			[Schedule_date],
			[Schedule],
			[SoftReplace],
			[Site_iata],
			[Date_boundary],
			[Chute],
			[LastChanged]
			FROM [dbo].[tblFlight]
			WHERE 
			([Identify] LIKE @Identify OR @Identify is null)
			AND ([Adi] LIKE @Adi OR @Adi is null)
			AND ([Linecode] LIKE @Linecode OR @Linecode is null)
			AND ([Number] LIKE @Number OR @Number is null)
			AND ([Schedule_date] LIKE @Schedule_date OR @Schedule_date is null)
			AND ([Schedule] LIKE @Schedule OR @Schedule is null)
			AND ([SoftReplace] LIKE @SoftReplace OR @SoftReplace is null)
			AND ([Site_iata] LIKE @Site_iata OR @Site_iata is null)
			AND ([Date_boundary] LIKE @Date_boundary OR @Date_boundary is null)
			AND ([Chute] LIKE @Chute OR @Chute is null)
			AND ([LastChanged] LIKE @LastChanged OR @LastChanged is null)
			";

		internal static string ctprtblFlight_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[tblFlight]
			WHERE 
			([Identify] LIKE @Identify OR @Identify is null)
			AND ([Adi] LIKE @Adi OR @Adi is null)
			AND ([Linecode] LIKE @Linecode OR @Linecode is null)
			AND ([Number] LIKE @Number OR @Number is null)
			AND ([Schedule_date] LIKE @Schedule_date OR @Schedule_date is null)
			AND ([Schedule] LIKE @Schedule OR @Schedule is null)
			AND ([SoftReplace] LIKE @SoftReplace OR @SoftReplace is null)
			AND ([Site_iata] LIKE @Site_iata OR @Site_iata is null)
			AND ([Date_boundary] LIKE @Date_boundary OR @Date_boundary is null)
			AND ([Chute] LIKE @Chute OR @Chute is null)
			AND ([LastChanged] LIKE @LastChanged OR @LastChanged is null)
			";

		internal static string ctprtblFlight_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[tblFlight]
			SET
			[Adi] = @Adi
			,[Linecode] = @Linecode
			,[Number] = @Number
			,[Schedule_date] = @Schedule_date
			,[Schedule] = @Schedule
			,[SoftReplace] = @SoftReplace
			,[Site_iata] = @Site_iata
			,[Date_boundary] = @Date_boundary
			,[Chute] = @Chute
			,[LastChanged] = @LastChanged
			WHERE 
			[Identify] = @Identify
			SELECT 
			@Identify = [Identify]
			,@Adi = [Adi]
			,@Linecode = [Linecode]
			,@Number = [Number]
			,@Schedule_date = [Schedule_date]
			,@Schedule = [Schedule]
			,@SoftReplace = [SoftReplace]
			,@Site_iata = [Site_iata]
			,@Date_boundary = [Date_boundary]
			,@Chute = [Chute]
			,@LastChanged = [LastChanged]
			FROM [dbo].[tblFlight]
			WHERE 
			[Identify] = @Identify
			";

	}
}
#endregion

/*************************************************************
** Class generated by CodeTrigger, Version 4.8.6.1
** This class was generated on 04/10/2020 10:20:59 PM
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace CXR1BSAC.Data
{
	public partial class DAOBags : Conn_BaseData
	{
		#region member variables
		protected string _baggageTag;
		protected string _FlightRef;
		protected bool? _processed;
		protected string _bsm;
		protected string _bpm;
		protected string _YYYY;
		protected string _DDMM;
		protected DateTime? _timeRcvBSM;
		protected DateTime? _timeSendBPM;
		#endregion

		#region class methods
		public DAOBags()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table tblBags based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOBags
		///</returns>
		///<parameters>
		///string baggageTag
		///</parameters>
		public static DAOBags SelectOne(string baggageTag)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblBags");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)baggageTag?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOBags retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOBags();
					retObj._baggageTag					 = Convert.IsDBNull(dt.Rows[0]["Baggage_Tag"]) ? null : (string)dt.Rows[0]["Baggage_Tag"];
					retObj._FlightRef					 = Convert.IsDBNull(dt.Rows[0]["FlightRef"]) ? null : (string)dt.Rows[0]["FlightRef"];
					retObj._processed					 = Convert.IsDBNull(dt.Rows[0]["Processed"]) ? (bool?)null : (bool?)dt.Rows[0]["Processed"];
					retObj._bsm					 = Convert.IsDBNull(dt.Rows[0]["BSM"]) ? null : (string)dt.Rows[0]["BSM"];
					retObj._bpm					 = Convert.IsDBNull(dt.Rows[0]["BPM"]) ? null : (string)dt.Rows[0]["BPM"];
					retObj._timeRcvBSM					 = Convert.IsDBNull(dt.Rows[0]["TimeRcvBSM"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TimeRcvBSM"];
					retObj._timeSendBPM					 = Convert.IsDBNull(dt.Rows[0]["TimeSendBPM"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["TimeSendBPM"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table tblBags based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_baggageTag?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table tblBags
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_baggageTag?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_FlightRef?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Processed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_processed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BSM", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_bsm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BPM", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_bpm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeRcvBSM", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timeRcvBSM?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeSendBPM", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timeSendBPM?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_baggageTag					 = Convert.IsDBNull(command.Parameters["@Baggage_Tag"].Value) ? null : (string)command.Parameters["@Baggage_Tag"].Value;
				_FlightRef					 = Convert.IsDBNull(command.Parameters["@FlightRef"].Value) ? null : (string)command.Parameters["@FlightRef"].Value;
				_processed					 = Convert.IsDBNull(command.Parameters["@Processed"].Value) ? (bool?)null : (bool?)command.Parameters["@Processed"].Value;
				_bsm					 = Convert.IsDBNull(command.Parameters["@BSM"].Value) ? null : (string)command.Parameters["@BSM"].Value;
				_bpm					 = Convert.IsDBNull(command.Parameters["@BPM"].Value) ? null : (string)command.Parameters["@BPM"].Value;
				_timeRcvBSM					 = Convert.IsDBNull(command.Parameters["@TimeRcvBSM"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimeRcvBSM"].Value;
				_timeSendBPM					 = Convert.IsDBNull(command.Parameters["@TimeSendBPM"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimeSendBPM"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table tblBags
		///</Summary>
		///<returns>
		///IList-DAOBags.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOBags> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("tblBags");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOBags> objList = new List<DAOBags>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOBags retObj = new DAOBags();
						retObj._baggageTag					 = Convert.IsDBNull(row["Baggage_Tag"]) ? null : (string)row["Baggage_Tag"];
						retObj._FlightRef					 = Convert.IsDBNull(row["FlightRef"]) ? null : (string)row["FlightRef"];
						retObj._processed					 = Convert.IsDBNull(row["Processed"]) ? (bool?)null : (bool?)row["Processed"];
						retObj._bsm					 = Convert.IsDBNull(row["BSM"]) ? null : (string)row["BSM"];
						retObj._bpm					 = Convert.IsDBNull(row["BPM"]) ? null : (string)row["BPM"];
						retObj._timeRcvBSM					 = Convert.IsDBNull(row["TimeRcvBSM"]) ? (DateTime?)null : (DateTime?)row["TimeRcvBSM"];
						retObj._timeSendBPM					 = Convert.IsDBNull(row["TimeSendBPM"]) ? (DateTime?)null : (DateTime?)row["TimeSendBPM"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///IList-DAOBags.
		///</returns>
		///<parameters>
		///DAOBags daoBags
		///</parameters>
		public static IList<DAOBags> SelectAllBySearchFields(DAOBags daoBags)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_SelectAllBySearchFields;
			command.CommandType = CommandType.Text;
			//System.Windows.Forms.MessageBox.Show(StaticSqlConnection.ConnectionString.Trim());
			//SqlConnection conn = new SqlConnection("Server=171.244.18.171\\SQL2K14;Database=Sita_Default_v1;Integrated Security=false;User=sa;Password=P@ssw0rd");
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;//staticConnection;

			DataTable dt = new DataTable("tblBags");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.BaggageTag?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.FlightRef?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Processed", SqlDbType.Bit, 1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Processed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BSM", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Bsm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BPM", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Bpm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeRcvBSM", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.TimeRcvBSM?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeSendBPM", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.TimeSendBPM?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@YYYY", SqlDbType.NVarChar, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.YYYY ?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@DDMM", SqlDbType.NVarChar, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.DDMM ?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOBags> objList = new List<DAOBags>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOBags retObj = new DAOBags();
						retObj._baggageTag					 = Convert.IsDBNull(row["Baggage_Tag"]) ? null : (string)row["Baggage_Tag"];
						retObj._FlightRef					 = Convert.IsDBNull(row["FlightRef"]) ? null : (string)row["FlightRef"];
						retObj._processed					 = Convert.IsDBNull(row["Processed"]) ? (bool?)null : (bool?)row["Processed"];
						retObj._bsm					 = Convert.IsDBNull(row["BSM"]) ? null : (string)row["BSM"];
						retObj._bpm					 = Convert.IsDBNull(row["BPM"]) ? null : (string)row["BPM"];
						retObj._timeRcvBSM					 = Convert.IsDBNull(row["TimeRcvBSM"]) ? (DateTime?)null : (DateTime?)row["TimeRcvBSM"];
						retObj._timeSendBPM					 = Convert.IsDBNull(row["TimeSendBPM"]) ? (DateTime?)null : (DateTime?)row["TimeSendBPM"];
						retObj.YYYY = Convert.IsDBNull(row["YYYY"]) ? null : (string)row["YYYY"];
						retObj.DDMM = Convert.IsDBNull(row["DDMM"]) ? null : (string)row["DDMM"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///DAOBags daoBags
		///</parameters>
		public static Int32 SelectAllBySearchFieldsCount(DAOBags daoBags)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_SelectAllBySearchFieldsCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.BaggageTag?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.FlightRef?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Processed", SqlDbType.Bit, 1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Processed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BSM", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Bsm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BPM", SqlDbType.NVarChar, 4000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.Bpm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeRcvBSM", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.TimeRcvBSM?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeSendBPM", SqlDbType.DateTime, 8, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)daoBags.TimeSendBPM?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table tblBags based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprtblBags_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new SqlParameter("@Baggage_Tag", SqlDbType.NVarChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_baggageTag?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@FlightRef", SqlDbType.NVarChar, 200, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_FlightRef?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@Processed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_processed?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BSM", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_bsm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@BPM", SqlDbType.NVarChar, 4000, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_bpm?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeRcvBSM", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timeRcvBSM?? (object)DBNull.Value));
				command.Parameters.Add(new SqlParameter("@TimeSendBPM", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_timeSendBPM?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_baggageTag					 = Convert.IsDBNull(command.Parameters["@Baggage_Tag"].Value) ? null : (string)command.Parameters["@Baggage_Tag"].Value;
				_FlightRef					 = Convert.IsDBNull(command.Parameters["@FlightRef"].Value) ? null : (string)command.Parameters["@FlightRef"].Value;
				_processed					 = Convert.IsDBNull(command.Parameters["@Processed"].Value) ? (bool?)null : (bool?)command.Parameters["@Processed"].Value;
				_bsm					 = Convert.IsDBNull(command.Parameters["@BSM"].Value) ? null : (string)command.Parameters["@BSM"].Value;
				_bpm					 = Convert.IsDBNull(command.Parameters["@BPM"].Value) ? null : (string)command.Parameters["@BPM"].Value;
				_timeRcvBSM					 = Convert.IsDBNull(command.Parameters["@TimeRcvBSM"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimeRcvBSM"].Value;
				_timeSendBPM					 = Convert.IsDBNull(command.Parameters["@TimeSendBPM"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@TimeSendBPM"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string BaggageTag
		{
			get
			{
				return _baggageTag;
			}
			set
			{
				_baggageTag = value;
			}
		}
		public string YYYY
		{
			get
			{
				return _YYYY;
			}
			set
			{
				_YYYY = value;
			}
		}
		public string DDMM
		{
			get
			{
				return _DDMM;
			}
			set
			{
				_DDMM = value;
			}
		}
		public string FlightRef
		{
			get
			{
				return _FlightRef;
			}
			set
			{
				_FlightRef = value;
			}
		}

		public bool? Processed
		{
			get
			{
				return _processed;
			}
			set
			{
				_processed = value;
			}
		}

		public string Bsm
		{
			get
			{
				return _bsm;
			}
			set
			{
				_bsm = value;
			}
		}

		public string Bpm
		{
			get
			{
				return _bpm;
			}
			set
			{
				_bpm = value;
			}
		}

		public DateTime? TimeRcvBSM
		{
			get
			{
				return _timeRcvBSM;
			}
			set
			{
				_timeRcvBSM = value;
			}
		}

		public DateTime? TimeSendBPM
		{
			get
			{
				return _timeSendBPM;
			}
			set
			{
				_timeSendBPM = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace CXR1BSAC.Data
{
	public partial class InlineProcs
	{
		internal static string ctprtblBags_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[Baggage_Tag]
			,[FlightRef]
			,[Processed]
			,[BSM]
			,[BPM]
			,[TimeRcvBSM]
			,[TimeSendBPM]
			FROM [dbo].[tblBags]
			WHERE 
			[Baggage_Tag] = @Baggage_Tag
			";

		internal static string ctprtblBags_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[tblBags]
			WHERE 
			[Baggage_Tag] = @Baggage_Tag
			";

		internal static string ctprtblBags_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[tblBags]
			(
			[Baggage_Tag]
			,[FlightRef]
			,[Processed]
			,[BSM]
			,[BPM]
			,[TimeRcvBSM]
			,[TimeSendBPM]
			)
			VALUES
			(
			@Baggage_Tag
			,@FlightRef
			,@Processed
			,@BSM
			,@BPM
			,@TimeRcvBSM
			,@TimeSendBPM
			)
			SELECT 
			@Baggage_Tag = [Baggage_Tag]
			,@FlightRef = [FlightRef]
			,@Processed = [Processed]
			,@BSM = [BSM]
			,@BPM = [BPM]
			,@TimeRcvBSM = [TimeRcvBSM]
			,@TimeSendBPM = [TimeSendBPM]
			FROM [dbo].[tblBags]
			WHERE 
			[Baggage_Tag] = @Baggage_Tag
			";

		internal static string ctprtblBags_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[Baggage_Tag]
			,[FlightRef]
			,[Processed]
			,[BSM]
			,[BPM]
			,[TimeRcvBSM]
			,[TimeSendBPM]
			FROM [dbo].[tblBags]
			";

		internal static string ctprtblBags_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[tblBags]
			";

		internal static string ctprtblBags_SelectAllBySearchFields = @"
			
			-- selects all rows from the table according to search criteria
			SELECT 
			[Baggage_Tag],
			[FlightRef],
			[Processed],
			[BSM],
			[BPM],
			[TimeRcvBSM],
			[TimeSendBPM],
			[YYYY],
			[DDMM]
			FROM [dbo].[tblBags]
			WHERE 
			([Baggage_Tag] LIKE @Baggage_Tag OR @Baggage_Tag is null)
			AND ([FlightRef] LIKE @FlightRef OR @FlightRef is null)
			AND ([Processed] LIKE @Processed OR @Processed is null)
			AND ([BSM] LIKE @BSM OR @BSM is null)
			AND ([BPM] LIKE @BPM OR @BPM is null)
			AND ([TimeRcvBSM] LIKE @TimeRcvBSM OR @TimeRcvBSM is null)
			AND ([TimeSendBPM] LIKE @TimeSendBPM OR @TimeSendBPM is null)
			";

		internal static string ctprtblBags_SelectAllBySearchFieldsCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table according to search criteria
			SELECT COUNT(*)
			FROM [dbo].[tblBags]
			WHERE 
			([Baggage_Tag] LIKE @Baggage_Tag OR @Baggage_Tag is null)
			AND ([FlightRef] LIKE @FlightRef OR @FlightRef is null)
			AND ([Processed] LIKE @Processed OR @Processed is null)
			AND ([BSM] LIKE @BSM OR @BSM is null)
			AND ([BPM] LIKE @BPM OR @BPM is null)
			AND ([TimeRcvBSM] LIKE @TimeRcvBSM OR @TimeRcvBSM is null)
			AND ([TimeSendBPM] LIKE @TimeSendBPM OR @TimeSendBPM is null)
			";

		internal static string ctprtblBags_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[tblBags]
			SET
			[FlightRef] = @FlightRef
			,[Processed] = @Processed
			,[BSM] = @BSM
			,[BPM] = @BPM
			,[TimeRcvBSM] = @TimeRcvBSM
			,[TimeSendBPM] = @TimeSendBPM
			WHERE 
			[Baggage_Tag] = @Baggage_Tag
			SELECT 
			@Baggage_Tag = [Baggage_Tag]
			,@FlightRef = [FlightRef]
			,@Processed = [Processed]
			,@BSM = [BSM]
			,@BPM = [BPM]
			,@TimeRcvBSM = [TimeRcvBSM]
			,@TimeSendBPM = [TimeSendBPM]
			FROM [dbo].[tblBags]
			WHERE 
			[Baggage_Tag] = @Baggage_Tag
			";

	}
}
#endregion
